<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="25" passed="23" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-07T20:02:34 CDT" name="BankSuite" finished-at="2025-05-07T20:02:35 CDT" duration-ms="286">
    <groups>
      <group name="unit">
        <method signature="AccountTest.testDeposit(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" name="testDeposit" class="edu.mu.examplefortesting.tests.AccountTest"/>
        <method signature="AccountTest.testOverdraft(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" name="testOverdraft" class="edu.mu.examplefortesting.tests.AccountTest"/>
        <method signature="AccountTest.testWithdraw(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" name="testWithdraw" class="edu.mu.examplefortesting.tests.AccountTest"/>
        <method signature="AccountTest.testDeposit(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" name="testDeposit" class="edu.mu.examplefortesting.tests.AccountTest"/>
        <method signature="AccountTest.testOverdraft(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" name="testOverdraft" class="edu.mu.examplefortesting.tests.AccountTest"/>
        <method signature="AccountTest.testWithdraw(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" name="testWithdraw" class="edu.mu.examplefortesting.tests.AccountTest"/>
      </group> <!-- unit -->
      <group name="integration">
        <method signature="TransferTest.testBatchTransfer()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" name="testBatchTransfer" class="edu.mu.examplefortesting.tests.TransferTest"/>
      </group> <!-- integration -->
      <group name="failureDemo">
        <method signature="FailingTests.testBatchTransferWrongAssertion()[pri:0, instance:edu.mu.examplefortesting.tests.FailingTests@5dda768f]" name="testBatchTransferWrongAssertion" class="edu.mu.examplefortesting.tests.FailingTests"/>
        <method signature="FailingTests.testWithdrawNegativeAmount()[pri:0, instance:edu.mu.examplefortesting.tests.FailingTests@5dda768f]" name="testWithdrawNegativeAmount" class="edu.mu.examplefortesting.tests.FailingTests"/>
      </group> <!-- failureDemo -->
      <group name="InterestGroupDemo">
        <method signature="InterestTest.testAddInterest()[pri:0, instance:edu.mu.examplefortesting.tests.InterestTest@185a6e9, instance params:[]]" name="testAddInterest" class="edu.mu.examplefortesting.tests.InterestTest"/>
        <method signature="InterestTest.testAddInterest()[pri:0, instance:edu.mu.examplefortesting.tests.InterestTest@6f03482, instance params:[]]" name="testAddInterest" class="edu.mu.examplefortesting.tests.InterestTest"/>
      </group> <!-- InterestGroupDemo -->
    </groups>
    <test started-at="2025-05-07T20:02:34 CDT" name="UnitTests" finished-at="2025-05-07T20:02:34 CDT" duration-ms="22">
      <class name="edu.mu.examplefortesting.tests.AccountTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="beforeClass" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testDeposit(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="testDeposit" data-provider="amounts" finished-at="2025-05-07T20:02:34 CDT" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeposit -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="setup" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testDeposit(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="testDeposit" data-provider="amounts" finished-at="2025-05-07T20:02:34 CDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[50.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeposit -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="teardown" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="setup" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="teardown" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testOverdraft(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="testOverdraft" finished-at="2025-05-07T20:02:34 CDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[50.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[You are withdrawing more than your balance. This is not allowed.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: You are withdrawing more than your balance. This is not allowed.
at edu.mu.examplefortesting.BankAccount.withdraw(BankAccount.java:16)
at edu.mu.examplefortesting.tests.AccountTest.testOverdraft(AccountTest.java:69)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverdraft -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="setup" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testWithdraw(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="testWithdraw" data-provider="amounts" finished-at="2025-05-07T20:02:34 CDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithdraw -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="teardown" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="setup" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testWithdraw(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="testWithdraw" data-provider="amounts" finished-at="2025-05-07T20:02:34 CDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[50.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithdraw -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="setup" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="teardown" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="afterClass" finished-at="2025-05-07T20:02:34 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@38d8f54a]" started-at="2025-05-07T20:02:34 CDT" name="teardown" finished-at="2025-05-07T20:02:34 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- edu.mu.examplefortesting.tests.AccountTest -->
    </test> <!-- UnitTests -->
    <test started-at="2025-05-07T20:02:34 CDT" name="FactoryDemo" finished-at="2025-05-07T20:02:35 CDT" duration-ms="212">
      <class name="edu.mu.examplefortesting.tests.InterestTest">
        <test-method signature="testAddInterest()[pri:0, instance:edu.mu.examplefortesting.tests.InterestTest@185a6e9, instance params:[]]" started-at="2025-05-07T20:02:34 CDT" name="testAddInterest" finished-at="2025-05-07T20:02:35 CDT" duration-ms="208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddInterest -->
        <test-method signature="testAddInterest()[pri:0, instance:edu.mu.examplefortesting.tests.InterestTest@6f03482, instance params:[]]" started-at="2025-05-07T20:02:35 CDT" name="testAddInterest" finished-at="2025-05-07T20:02:35 CDT" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddInterest -->
      </class> <!-- edu.mu.examplefortesting.tests.InterestTest -->
    </test> <!-- FactoryDemo -->
    <test started-at="2025-05-07T20:02:35 CDT" name="MethodDependencyDemo" finished-at="2025-05-07T20:02:35 CDT" duration-ms="24">
      <class name="edu.mu.examplefortesting.tests.AccountTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="beforeClass" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="setup" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testDeposit(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="testDeposit" data-provider="amounts" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeposit -->
        <test-method signature="testDeposit(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="testDeposit" data-provider="amounts" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[50.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeposit -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="setup" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="teardown" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="teardown" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testOverdraft(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="testOverdraft" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[50.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[You are withdrawing more than your balance. This is not allowed.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: You are withdrawing more than your balance. This is not allowed.
at edu.mu.examplefortesting.BankAccount.withdraw(BankAccount.java:16)
at edu.mu.examplefortesting.tests.AccountTest.testOverdraft(AccountTest.java:69)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverdraft -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="setup" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="teardown" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testWithdraw(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="testWithdraw" data-provider="amounts" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithdraw -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="setup" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="teardown" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="setup" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testWithdraw(double)[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="testWithdraw" data-provider="amounts" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[50.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithdraw -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="afterClass" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="teardown" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- edu.mu.examplefortesting.tests.AccountTest -->
      <class name="edu.mu.examplefortesting.tests.TransferTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentDeposit()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testConcurrentDeposit" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentDeposit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:null]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testBatchTransfer()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="testBatchTransfer" depends-on-groups="unit" finished-at="2025-05-07T20:02:35 CDT" depends-on-methods="testDeposit" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBatchTransfer -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:edu.mu.examplefortesting.tests.TransferTest@1a677343]" started-at="2025-05-07T20:02:35 CDT" name="setUp" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- edu.mu.examplefortesting.tests.TransferTest -->
    </test> <!-- MethodDependencyDemo -->
    <test started-at="2025-05-07T20:02:35 CDT" name="FailureDemo" finished-at="2025-05-07T20:02:35 CDT" duration-ms="3">
      <class name="edu.mu.examplefortesting.tests.AccountTest">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:34 CDT" name="beforeSuite" finished-at="2025-05-07T20:02:34 CDT" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:edu.mu.examplefortesting.tests.AccountTest@62ddbd7e]" started-at="2025-05-07T20:02:35 CDT" name="afterSuite" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- edu.mu.examplefortesting.tests.AccountTest -->
      <class name="edu.mu.examplefortesting.tests.FailingTests">
        <test-method signature="testBatchTransferWrongAssertion()[pri:0, instance:edu.mu.examplefortesting.tests.FailingTests@5dda768f]" started-at="2025-05-07T20:02:35 CDT" name="testBatchTransferWrongAssertion" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "edu.mu.examplefortesting.Transaction.batchTransfer(edu.mu.examplefortesting.BankAccount, edu.mu.examplefortesting.BankAccount, double, int)" because "this.svc" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "edu.mu.examplefortesting.Transaction.batchTransfer(edu.mu.examplefortesting.BankAccount, edu.mu.examplefortesting.BankAccount, double, int)" because "this.svc" is null
at edu.mu.examplefortesting.tests.FailingTests.testBatchTransferWrongAssertion(FailingTests.java:44)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBatchTransferWrongAssertion -->
        <test-method signature="testWithdrawNegativeAmount()[pri:0, instance:edu.mu.examplefortesting.tests.FailingTests@5dda768f]" started-at="2025-05-07T20:02:35 CDT" name="testWithdrawNegativeAmount" finished-at="2025-05-07T20:02:35 CDT" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestException">
            <message>
              <![CDATA[
Expected exception of type class java.lang.IllegalArgumentException but got java.lang.NullPointerException: Cannot invoke "edu.mu.examplefortesting.BankAccount.withdraw(double)" because "this.account" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestException: 
Expected exception of type class java.lang.IllegalArgumentException but got java.lang.NullPointerException: Cannot invoke "edu.mu.examplefortesting.BankAccount.withdraw(double)" because "this.account" is null
at org.testng.internal.invokers.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:67)
at org.testng.internal.invokers.TestInvoker.considerExceptions(TestInvoker.java:853)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:718)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: java.lang.NullPointerException: Cannot invoke "edu.mu.examplefortesting.BankAccount.withdraw(double)" because "this.account" is null
at edu.mu.examplefortesting.tests.FailingTests.testWithdrawNegativeAmount(FailingTests.java:29)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
... 22 more
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithdrawNegativeAmount -->
      </class> <!-- edu.mu.examplefortesting.tests.FailingTests -->
    </test> <!-- FailureDemo -->
  </suite> <!-- BankSuite -->
</testng-results>
